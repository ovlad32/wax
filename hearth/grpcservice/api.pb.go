// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package grpcservice is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	RegisterNodeRequest
	RegisterNodeResponse
	HeartBeatRequest
	HeartBeatResponse
*/
package grpcservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterNodeRequest struct {
	HostName     string `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	LocalAddress string `protobuf:"bytes,2,opt,name=localAddress" json:"localAddress,omitempty"`
	NodeId       string `protobuf:"bytes,3,opt,name=nodeId" json:"nodeId,omitempty"`
	StandaloneId string `protobuf:"bytes,4,opt,name=standaloneId" json:"standaloneId,omitempty"`
}

func (m *RegisterNodeRequest) Reset()                    { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()               {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterNodeRequest) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *RegisterNodeRequest) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *RegisterNodeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RegisterNodeRequest) GetStandaloneId() string {
	if m != nil {
		return m.StandaloneId
	}
	return ""
}

type RegisterNodeResponse struct {
	NodeId       string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *RegisterNodeResponse) Reset()                    { *m = RegisterNodeResponse{} }
func (m *RegisterNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeResponse) ProtoMessage()               {}
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterNodeResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RegisterNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type HeartBeatRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *HeartBeatRequest) Reset()                    { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()               {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeartBeatRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HeartBeatRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type HeartBeatResponse struct {
	NodeId        string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	LastHeartBeat string `protobuf:"bytes,2,opt,name=lastHeartBeat" json:"lastHeartBeat,omitempty"`
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HeartBeatResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HeartBeatResponse) GetLastHeartBeat() string {
	if m != nil {
		return m.LastHeartBeat
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterNodeRequest)(nil), "grpcservice.RegisterNodeRequest")
	proto.RegisterType((*RegisterNodeResponse)(nil), "grpcservice.RegisterNodeResponse")
	proto.RegisterType((*HeartBeatRequest)(nil), "grpcservice.HeartBeatRequest")
	proto.RegisterType((*HeartBeatResponse)(nil), "grpcservice.HeartBeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeManager service

type NodeManagerClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	HeartBeatNode(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
}

type nodeManagerClient struct {
	cc *grpc.ClientConn
}

func NewNodeManagerClient(cc *grpc.ClientConn) NodeManagerClient {
	return &nodeManagerClient{cc}
}

func (c *nodeManagerClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := grpc.Invoke(ctx, "/grpcservice.nodeManager/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) HeartBeatNode(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/grpcservice.nodeManager/HeartBeatNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeManager service

type NodeManagerServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	HeartBeatNode(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
}

func RegisterNodeManagerServer(s *grpc.Server, srv NodeManagerServer) {
	s.RegisterService(&_NodeManager_serviceDesc, srv)
}

func _NodeManager_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.nodeManager/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_HeartBeatNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).HeartBeatNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.nodeManager/HeartBeatNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).HeartBeatNode(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcservice.nodeManager",
	HandlerType: (*NodeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _NodeManager_RegisterNode_Handler,
		},
		{
			MethodName: "HeartBeatNode",
			Handler:    _NodeManager_HeartBeatNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x45, 0x0d, 0xb1, 0xd3, 0x36, 0xd1, 0xd5, 0x34, 0x84, 0x44, 0x53, 0x37, 0x1e, 0x3c,
	0x71, 0xd0, 0x27, 0xb0, 0x27, 0x3d, 0xb4, 0x51, 0x12, 0x1f, 0x60, 0x64, 0x27, 0x48, 0x82, 0xbb,
	0xb8, 0xb3, 0xf5, 0x3d, 0x7c, 0x19, 0x9f, 0xcf, 0x40, 0x81, 0x2c, 0x8d, 0xb5, 0xc7, 0xf9, 0x7f,
	0xfe, 0x8f, 0x7f, 0x18, 0x60, 0x84, 0x55, 0x91, 0x54, 0xd6, 0x38, 0x23, 0xc6, 0xb9, 0xad, 0x32,
	0x26, 0xfb, 0x55, 0x64, 0x24, 0xbf, 0x03, 0x38, 0x4f, 0x29, 0x2f, 0xd8, 0x91, 0x5d, 0x19, 0x45,
	0x29, 0x7d, 0xae, 0x89, 0x9d, 0x88, 0xe1, 0xe4, 0xdd, 0xb0, 0x5b, 0xe1, 0x07, 0x45, 0xc1, 0x3c,
	0xb8, 0x1d, 0xa5, 0xfd, 0x2c, 0x24, 0x4c, 0x4a, 0x93, 0x61, 0xf9, 0xa0, 0x94, 0x25, 0xe6, 0xe8,
	0xb0, 0xf1, 0x07, 0x9a, 0x98, 0x41, 0xa8, 0x8d, 0xa2, 0x27, 0x15, 0x1d, 0x35, 0x6e, 0x3b, 0xd5,
	0x59, 0x76, 0xa8, 0x15, 0x96, 0x46, 0xd7, 0xee, 0xf1, 0x26, 0xeb, 0x6b, 0x32, 0x85, 0x8b, 0x61,
	0x25, 0xae, 0x8c, 0x66, 0xf2, 0x98, 0xc1, 0x36, 0x93, 0xac, 0x35, 0x76, 0x49, 0xcc, 0x98, 0x53,
	0xd7, 0xc7, 0xd7, 0xe4, 0x02, 0x4e, 0x1f, 0x09, 0xad, 0x5b, 0x10, 0xba, 0x6e, 0xc7, 0x5d, 0xbc,
	0x19, 0x84, 0xec, 0xd0, 0xad, 0xbb, 0xcd, 0xda, 0x49, 0xbe, 0xc0, 0x99, 0xc7, 0xd8, 0x53, 0xea,
	0x06, 0xa6, 0x25, 0xb2, 0xeb, 0x03, 0x2d, 0x6b, 0x28, 0xde, 0xfd, 0x04, 0x30, 0xae, 0x03, 0x4b,
	0xd4, 0x98, 0x93, 0x15, 0xaf, 0x30, 0xf1, 0x57, 0x17, 0xf3, 0xc4, 0x3b, 0x56, 0xf2, 0xc7, 0xa1,
	0xe2, 0xeb, 0x7f, 0x9e, 0xd8, 0x54, 0x94, 0x07, 0xe2, 0x19, 0xa6, 0xfd, 0x3b, 0x1b, 0xee, 0xe5,
	0x20, 0xb5, 0xfd, 0x65, 0xe2, 0xab, 0x5d, 0x76, 0x47, 0x7c, 0x0b, 0x9b, 0x7f, 0xe9, 0xfe, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x75, 0x2e, 0x38, 0x0f, 0x58, 0x02, 0x00, 0x00,
}
