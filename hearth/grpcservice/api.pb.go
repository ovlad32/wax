// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package grpcservice is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	AppNodeRegisterRequest
	AppNodeRegisterResponse
	HeartBeatRequest
	HeartBeatResponse
	CategorySplitRequest
	CategorySplitResponse
*/
package grpcservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppNodeRegisterRequest struct {
	HostName     string `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	LocalAddress string `protobuf:"bytes,2,opt,name=localAddress" json:"localAddress,omitempty"`
	NodeId       string `protobuf:"bytes,3,opt,name=nodeId" json:"nodeId,omitempty"`
}

func (m *AppNodeRegisterRequest) Reset()                    { *m = AppNodeRegisterRequest{} }
func (m *AppNodeRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*AppNodeRegisterRequest) ProtoMessage()               {}
func (*AppNodeRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppNodeRegisterRequest) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *AppNodeRegisterRequest) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *AppNodeRegisterRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type AppNodeRegisterResponse struct {
	NodeId       string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *AppNodeRegisterResponse) Reset()                    { *m = AppNodeRegisterResponse{} }
func (m *AppNodeRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*AppNodeRegisterResponse) ProtoMessage()               {}
func (*AppNodeRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppNodeRegisterResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AppNodeRegisterResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type HeartBeatRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *HeartBeatRequest) Reset()                    { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()               {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeartBeatRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HeartBeatRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type HeartBeatResponse struct {
	NodeId        string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	LastHeartBeat string `protobuf:"bytes,2,opt,name=lastHeartBeat" json:"lastHeartBeat,omitempty"`
	ErrorMessage  string `protobuf:"bytes,3,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HeartBeatResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HeartBeatResponse) GetLastHeartBeat() string {
	if m != nil {
		return m.LastHeartBeat
	}
	return ""
}

func (m *HeartBeatResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type CategorySplitRequest struct {
	SourceTableInfoId int64 `protobuf:"varint,1,opt,name=sourceTableInfoId" json:"sourceTableInfoId,omitempty"`
	CategorySplitId   int64 `protobuf:"varint,2,opt,name=categorySplitId" json:"categorySplitId,omitempty"`
}

func (m *CategorySplitRequest) Reset()                    { *m = CategorySplitRequest{} }
func (m *CategorySplitRequest) String() string            { return proto.CompactTextString(m) }
func (*CategorySplitRequest) ProtoMessage()               {}
func (*CategorySplitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CategorySplitRequest) GetSourceTableInfoId() int64 {
	if m != nil {
		return m.SourceTableInfoId
	}
	return 0
}

func (m *CategorySplitRequest) GetCategorySplitId() int64 {
	if m != nil {
		return m.CategorySplitId
	}
	return 0
}

type CategorySplitResponse struct {
	Dump []byte `protobuf:"bytes,1,opt,name=dump,proto3" json:"dump,omitempty"`
}

func (m *CategorySplitResponse) Reset()                    { *m = CategorySplitResponse{} }
func (m *CategorySplitResponse) String() string            { return proto.CompactTextString(m) }
func (*CategorySplitResponse) ProtoMessage()               {}
func (*CategorySplitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CategorySplitResponse) GetDump() []byte {
	if m != nil {
		return m.Dump
	}
	return nil
}

func init() {
	proto.RegisterType((*AppNodeRegisterRequest)(nil), "grpcservice.AppNodeRegisterRequest")
	proto.RegisterType((*AppNodeRegisterResponse)(nil), "grpcservice.AppNodeRegisterResponse")
	proto.RegisterType((*HeartBeatRequest)(nil), "grpcservice.HeartBeatRequest")
	proto.RegisterType((*HeartBeatResponse)(nil), "grpcservice.HeartBeatResponse")
	proto.RegisterType((*CategorySplitRequest)(nil), "grpcservice.CategorySplitRequest")
	proto.RegisterType((*CategorySplitResponse)(nil), "grpcservice.CategorySplitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppNodeManager service

type AppNodeManagerClient interface {
	AppNodeRegister(ctx context.Context, in *AppNodeRegisterRequest, opts ...grpc.CallOption) (*AppNodeRegisterResponse, error)
	AppNodeHeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
}

type appNodeManagerClient struct {
	cc *grpc.ClientConn
}

func NewAppNodeManagerClient(cc *grpc.ClientConn) AppNodeManagerClient {
	return &appNodeManagerClient{cc}
}

func (c *appNodeManagerClient) AppNodeRegister(ctx context.Context, in *AppNodeRegisterRequest, opts ...grpc.CallOption) (*AppNodeRegisterResponse, error) {
	out := new(AppNodeRegisterResponse)
	err := grpc.Invoke(ctx, "/grpcservice.appNodeManager/AppNodeRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appNodeManagerClient) AppNodeHeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/grpcservice.appNodeManager/AppNodeHeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppNodeManager service

type AppNodeManagerServer interface {
	AppNodeRegister(context.Context, *AppNodeRegisterRequest) (*AppNodeRegisterResponse, error)
	AppNodeHeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
}

func RegisterAppNodeManagerServer(s *grpc.Server, srv AppNodeManagerServer) {
	s.RegisterService(&_AppNodeManager_serviceDesc, srv)
}

func _AppNodeManager_AppNodeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppNodeRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppNodeManagerServer).AppNodeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.appNodeManager/AppNodeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppNodeManagerServer).AppNodeRegister(ctx, req.(*AppNodeRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppNodeManager_AppNodeHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppNodeManagerServer).AppNodeHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.appNodeManager/AppNodeHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppNodeManagerServer).AppNodeHeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppNodeManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcservice.appNodeManager",
	HandlerType: (*AppNodeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppNodeRegister",
			Handler:    _AppNodeManager_AppNodeRegister_Handler,
		},
		{
			MethodName: "AppNodeHeartBeat",
			Handler:    _AppNodeManager_AppNodeHeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for DataManager service

type DataManagerClient interface {
	CategorySplitCollect(ctx context.Context, in *CategorySplitRequest, opts ...grpc.CallOption) (DataManager_CategorySplitCollectClient, error)
}

type dataManagerClient struct {
	cc *grpc.ClientConn
}

func NewDataManagerClient(cc *grpc.ClientConn) DataManagerClient {
	return &dataManagerClient{cc}
}

func (c *dataManagerClient) CategorySplitCollect(ctx context.Context, in *CategorySplitRequest, opts ...grpc.CallOption) (DataManager_CategorySplitCollectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataManager_serviceDesc.Streams[0], c.cc, "/grpcservice.DataManager/CategorySplitCollect", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataManagerCategorySplitCollectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataManager_CategorySplitCollectClient interface {
	Recv() (*CategorySplitResponse, error)
	grpc.ClientStream
}

type dataManagerCategorySplitCollectClient struct {
	grpc.ClientStream
}

func (x *dataManagerCategorySplitCollectClient) Recv() (*CategorySplitResponse, error) {
	m := new(CategorySplitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DataManager service

type DataManagerServer interface {
	CategorySplitCollect(*CategorySplitRequest, DataManager_CategorySplitCollectServer) error
}

func RegisterDataManagerServer(s *grpc.Server, srv DataManagerServer) {
	s.RegisterService(&_DataManager_serviceDesc, srv)
}

func _DataManager_CategorySplitCollect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CategorySplitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataManagerServer).CategorySplitCollect(m, &dataManagerCategorySplitCollectServer{stream})
}

type DataManager_CategorySplitCollectServer interface {
	Send(*CategorySplitResponse) error
	grpc.ServerStream
}

type dataManagerCategorySplitCollectServer struct {
	grpc.ServerStream
}

func (x *dataManagerCategorySplitCollectServer) Send(m *CategorySplitResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DataManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcservice.DataManager",
	HandlerType: (*DataManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CategorySplitCollect",
			Handler:       _DataManager_CategorySplitCollect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x5d, 0x4f, 0xe2, 0x40,
	0x14, 0xdd, 0x6e, 0x37, 0x64, 0xb9, 0xb0, 0x0b, 0x4c, 0x76, 0x59, 0xd2, 0x64, 0x8d, 0x8e, 0x3c,
	0x90, 0x68, 0x88, 0xc1, 0x5f, 0x00, 0xf8, 0x20, 0x0f, 0xf0, 0x50, 0xf4, 0xd5, 0xe4, 0xd2, 0x5e,
	0x6b, 0x93, 0xd2, 0x19, 0x67, 0xa6, 0x26, 0xfe, 0x40, 0xff, 0x97, 0xb1, 0xb4, 0xd8, 0x96, 0x0f,
	0xdf, 0x7a, 0xef, 0x99, 0x7b, 0xce, 0xb9, 0x73, 0xa6, 0x50, 0x47, 0x19, 0x0e, 0xa5, 0x12, 0x46,
	0xb0, 0x46, 0xa0, 0xa4, 0xa7, 0x49, 0xbd, 0x84, 0x1e, 0x71, 0x09, 0xdd, 0xb1, 0x94, 0x0b, 0xe1,
	0x93, 0x4b, 0x41, 0xa8, 0x0d, 0x29, 0x97, 0x9e, 0x13, 0xd2, 0x86, 0x39, 0xf0, 0xf3, 0x49, 0x68,
	0xb3, 0xc0, 0x35, 0xf5, 0xac, 0x53, 0x6b, 0x50, 0x77, 0xb7, 0x35, 0xe3, 0xd0, 0x8c, 0x84, 0x87,
	0xd1, 0xd8, 0xf7, 0x15, 0x69, 0xdd, 0xfb, 0x9e, 0xe2, 0xa5, 0x1e, 0xeb, 0x42, 0x2d, 0x16, 0x3e,
	0xcd, 0xfc, 0x9e, 0x9d, 0xa2, 0x59, 0xc5, 0xef, 0xe1, 0xdf, 0x8e, 0xa2, 0x96, 0x22, 0xd6, 0x54,
	0x18, 0xb1, 0x8a, 0x23, 0x1f, 0x72, 0xa4, 0x94, 0x50, 0x73, 0xd2, 0x1a, 0x03, 0xca, 0xe5, 0x8a,
	0x3d, 0x3e, 0x81, 0xf6, 0x2d, 0xa1, 0x32, 0x13, 0x42, 0x93, 0xaf, 0x70, 0x88, 0xaf, 0x0b, 0x35,
	0x6d, 0xd0, 0x24, 0xb9, 0xf1, 0xac, 0xe2, 0x09, 0x74, 0x0a, 0x1c, 0x5f, 0x98, 0xea, 0xc3, 0xaf,
	0x08, 0xb5, 0xd9, 0x0e, 0x64, 0x5c, 0xe5, 0xe6, 0x8e, 0x75, 0x7b, 0x8f, 0xf5, 0x18, 0xfe, 0x4c,
	0xd1, 0x50, 0x20, 0xd4, 0xeb, 0x52, 0x46, 0xe1, 0xd6, 0xfe, 0x25, 0x74, 0xb4, 0x48, 0x94, 0x47,
	0x77, 0xb8, 0x8a, 0x68, 0x16, 0x3f, 0x8a, 0xcc, 0x84, 0xed, 0xee, 0x02, 0x6c, 0x00, 0x2d, 0xaf,
	0xc8, 0x32, 0xf3, 0x53, 0x47, 0xb6, 0x5b, 0x6d, 0xf3, 0x0b, 0xf8, 0x5b, 0xd1, 0xcb, 0x56, 0x65,
	0xf0, 0xc3, 0x4f, 0xd6, 0x32, 0xd5, 0x68, 0xba, 0xe9, 0xf7, 0xe8, 0xcd, 0x82, 0xdf, 0xb8, 0xc9,
	0x6b, 0x8e, 0x31, 0x06, 0xa4, 0xd8, 0x03, 0xb4, 0x2a, 0x09, 0xb2, 0xf3, 0x61, 0xe1, 0x51, 0x0d,
	0xf7, 0xbf, 0x28, 0xa7, 0x7f, 0xfc, 0xd0, 0xc6, 0x04, 0xff, 0xc6, 0x96, 0xd0, 0xce, 0xc0, 0xcf,
	0x7b, 0xfc, 0x5f, 0x9a, 0xad, 0x26, 0xed, 0x9c, 0x1c, 0x82, 0x73, 0xd2, 0x91, 0x84, 0xc6, 0x0d,
	0x1a, 0xcc, 0x77, 0xc0, 0xca, 0x9d, 0x4f, 0x45, 0x14, 0x91, 0x67, 0xd8, 0x59, 0x89, 0x68, 0x5f,
	0x2c, 0x0e, 0x3f, 0x76, 0x24, 0xd7, 0xbb, 0xb2, 0x56, 0xb5, 0xf4, 0x77, 0xbb, 0x7e, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0xc5, 0x2a, 0x06, 0x7b, 0x03, 0x00, 0x00,
}
